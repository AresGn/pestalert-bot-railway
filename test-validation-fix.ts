import { HealthAnalysisService } from './src/services/healthAnalysisService';
import * as fs from 'fs';
import * as path from 'path';

/**
 * Test pour v√©rifier que la correction de validation fonctionne
 */
async function testValidationFix() {
  console.log('üß™ Test de la correction de validation d\'image');
  console.log('='.repeat(50));

  const healthAnalysisService = new HealthAnalysisService();

  // Test 1: Image non-agricole (devrait √™tre rejet√©e)
  console.log('\nüìã Test 1: Image non-agricole');
  try {
    // Cr√©er une image de test simple (1x1 pixel noir)
    const nonAgriculturalImage = Buffer.from([
      0xFF, 0xD8, 0xFF, 0xE0, 0x00, 0x10, 0x4A, 0x46, 0x49, 0x46, 0x00, 0x01,
      0x01, 0x01, 0x00, 0x48, 0x00, 0x48, 0x00, 0x00, 0xFF, 0xDB, 0x00, 0x43,
      0x00, 0x08, 0x06, 0x06, 0x07, 0x06, 0x05, 0x08, 0x07, 0x07, 0x07, 0x09,
      0x09, 0x08, 0x0A, 0x0C, 0x14, 0x0D, 0x0C, 0x0B, 0x0B, 0x0C, 0x19, 0x12,
      0x13, 0x0F, 0x14, 0x1D, 0x1A, 0x1F, 0x1E, 0x1D, 0x1A, 0x1C, 0x1C, 0x20,
      0x24, 0x2E, 0x27, 0x20, 0x22, 0x2C, 0x23, 0x1C, 0x1C, 0x28, 0x37, 0x29,
      0x2C, 0x30, 0x31, 0x34, 0x34, 0x34, 0x1F, 0x27, 0x39, 0x3D, 0x38, 0x32,
      0x3C, 0x2E, 0x33, 0x34, 0x32, 0xFF, 0xC0, 0x00, 0x11, 0x08, 0x00, 0x01,
      0x00, 0x01, 0x01, 0x01, 0x11, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11, 0x01,
      0xFF, 0xC4, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xFF, 0xC4,
      0x00, 0x14, 0x10, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xDA, 0x00, 0x0C,
      0x03, 0x01, 0x00, 0x02, 0x11, 0x03, 0x11, 0x00, 0x3F, 0x00, 0x00, 0xFF, 0xD9
    ]);

    const result = await healthAnalysisService.analyzeCropHealth(nonAgriculturalImage, 'test-user');
    
    console.log(`   R√©sultat: isHealthy=${result.isHealthy}, confidence=${result.confidence}`);
    console.log(`   TextMessage pr√©sent: ${!!result.textMessage}`);
    
    // V√©rifier les conditions de d√©tection d'erreur de validation
    const isValidationError = result.confidence === 0 && !result.isHealthy && result.textMessage;
    console.log(`   ‚úÖ D√©tect√© comme erreur de validation: ${isValidationError}`);
    
    if (result.textMessage) {
      const shortMessage = result.textMessage.substring(0, 100) + '...';
      console.log(`   üìù Message: ${shortMessage}`);
    }

  } catch (error: any) {
    console.log(`   ‚ùå Erreur: ${error.message}`);
  }

  console.log('\nüéØ R√©sum√© du test:');
  console.log('   - Si "D√©tect√© comme erreur de validation: true" ‚Üí ‚úÖ Correction fonctionne');
  console.log('   - Si "D√©tect√© comme erreur de validation: false" ‚Üí ‚ùå Probl√®me persiste');
  
  console.log('\nüìã Avec cette correction, le mode simplifi√© devrait maintenant:');
  console.log('   1. D√©tecter les erreurs de validation (confidence=0, isHealthy=false, textMessage pr√©sent)');
  console.log('   2. Envoyer directement le message d\'erreur au lieu de "diseased"');
  console.log('   3. Logger l\'erreur comme "Image Validation Error"');
  console.log('   4. R√©initialiser la session et sortir sans analyse normale');
}

// Ex√©cuter le test
testValidationFix().catch(console.error);
