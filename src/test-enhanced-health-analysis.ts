import dotenv from 'dotenv';
import { HealthAnalysisService } from './services/healthAnalysisService';
import { ConfidenceAnalysisService } from './services/confidenceAnalysisService';
import { AudioService } from './services/audioService';
import { CropHealthService } from './services/cropHealthService';
import * as fs from 'fs';
import * as path from 'path';

dotenv.config();

/**
 * Script de test pour valider le syst√®me d'analyse de sant√© am√©lior√©
 */
async function testEnhancedHealthAnalysis() {
  console.log('üß™ Test du syst√®me d\'analyse de sant√© am√©lior√©');
  console.log('=' .repeat(60));

  // 1. Test des services de base
  console.log('\nüìã 1. Test des services de base...');
  
  const healthAnalysisService = new HealthAnalysisService();
  const confidenceAnalysisService = new ConfidenceAnalysisService();
  const audioService = new AudioService();
  const cropHealthService = new CropHealthService();

  console.log('  ‚úÖ Services initialis√©s');

  // 2. Test du service audio am√©lior√©
  console.log('\nüéµ 2. Test du service audio am√©lior√©...');
  const audioStatus = audioService.checkAudioFiles();
  console.log(`  üìä Fichiers requis: ${audioStatus.available ? 'Tous disponibles' : 'Manquants'}`);
  
  if (!audioStatus.available) {
    console.log(`  ‚ùå Fichiers requis manquants: ${audioStatus.missing.join(', ')}`);
  }
  
  if (audioStatus.optional_missing.length > 0) {
    console.log(`  ‚ö†Ô∏è Fichiers optionnels manquants: ${audioStatus.optional_missing.join(', ')}`);
    console.log('  üí° Ces fichiers am√©lioreront l\'exp√©rience utilisateur');
  }

  // 3. Test du service d'analyse de confiance
  console.log('\nüìä 3. Test du service d\'analyse de confiance...');
  
  // Test des diff√©rents niveaux de confiance
  const testConfidences = [0.15, 0.35, 0.60, 0.82, 0.95];
  
  testConfidences.forEach(confidence => {
    const level = confidenceAnalysisService.getConfidenceLevel(confidence);
    const interval = confidenceAnalysisService.getConfidenceInterval(confidence);
    console.log(`  üìà Confiance ${(confidence * 100).toFixed(1)}% ‚Üí Niveau: ${level} (${interval.description})`);
  });

  // 4. Test de la qualit√© d'analyse
  console.log('\nüîç 4. Test de la qualit√© d\'analyse...');
  
  const qualityTests = [
    { binary: 0.9, disease: 0.85, imageQuality: 'excellent', time: 1.5 },
    { binary: 0.6, disease: 0.4, imageQuality: 'fair', time: 3.2 },
    { binary: 0.3, disease: 0.2, imageQuality: 'poor', time: 5.0 }
  ];

  qualityTests.forEach((test, index) => {
    const quality = confidenceAnalysisService.determineAnalysisQuality(
      test.binary,
      test.disease,
      test.imageQuality as any,
      test.time
    );
    console.log(`  üéØ Test ${index + 1}: Qualit√© ${quality} (binaire: ${(test.binary * 100).toFixed(1)}%, maladie: ${(test.disease * 100).toFixed(1)}%)`);
  });

  // 5. Test des recommandations
  console.log('\nüí° 5. Test des recommandations...');
  
  const recommendationTests = [
    { level: 'very_high' as const, healthy: true, disease: undefined },
    { level: 'high' as const, healthy: false, disease: 'Cassava Mosaic Disease' },
    { level: 'medium' as const, healthy: false, disease: 'Maize Lethal Necrosis' },
    { level: 'low' as const, healthy: true, disease: undefined }
  ];

  recommendationTests.forEach(test => {
    const recommendations = confidenceAnalysisService.generateRecommendations(
      test.level,
      test.healthy,
      test.disease
    );
    console.log(`  üìã ${test.level} + ${test.healthy ? 'sain' : 'malade'}:`);
    console.log(`    ‚Ä¢ Imm√©diates: ${recommendations.immediate.length} actions`);
    console.log(`    ‚Ä¢ Court terme: ${recommendations.short_term.length} actions`);
    console.log(`    ‚Ä¢ Surveillance: ${recommendations.monitoring.length} actions`);
  });

  // 6. Test de l'√©valuation des risques
  console.log('\n‚ö†Ô∏è 6. Test de l\'√©valuation des risques...');
  
  const riskTests = [
    { healthy: true, level: 'very_high' as const, confidence: 0.95 },
    { healthy: false, level: 'high' as const, confidence: 0.85, disease: 'Fall Armyworm' },
    { healthy: false, level: 'medium' as const, confidence: 0.60, disease: 'Unknown Disease' },
    { healthy: false, level: 'low' as const, confidence: 0.30 }
  ];

  riskTests.forEach((test, index) => {
    const risk = confidenceAnalysisService.assessRiskLevel(
      test.healthy,
      test.level,
      test.confidence,
      test.disease
    );
    console.log(`  üéØ Test ${index + 1}: Risque ${risk.level} - Urgence: ${risk.urgency}`);
    console.log(`    Facteurs: ${risk.factors.join(', ')}`);
  });

  // 7. Test de coh√©rence des pr√©dictions
  console.log('\nüîÑ 7. Test de coh√©rence des pr√©dictions...');
  
  const consistencyTests = [
    { binary: 0.9, disease: 0.85, prediction: 'diseased' as const },
    { binary: 0.8, disease: 0.2, prediction: 'diseased' as const }, // Incoh√©rent
    { binary: 0.3, disease: 0.8, prediction: 'healthy' as const }, // Incoh√©rent
    { binary: 0.9, disease: 0.1, prediction: 'healthy' as const }
  ];

  consistencyTests.forEach((test, index) => {
    const consistency = confidenceAnalysisService.calculatePredictionConsistency(
      test.binary,
      test.disease,
      test.prediction
    );
    console.log(`  üîÑ Test ${index + 1}: Coh√©rence ${(consistency * 100).toFixed(1)}% (binaire: ${test.prediction}, confiance maladie: ${(test.disease * 100).toFixed(1)}%)`);
  });

  // 8. Test de s√©lection des fichiers audio
  console.log('\nüé§ 8. Test de s√©lection des fichiers audio...');
  
  const audioTests = [
    { level: 'very_high' as const, healthy: true },
    { level: 'very_high' as const, healthy: false },
    { level: 'medium' as const, healthy: true },
    { level: 'low' as const, healthy: false },
    { level: 'very_low' as const, healthy: true }
  ];

  audioTests.forEach(test => {
    const audioFile = confidenceAnalysisService.getAudioFile(test.level, test.healthy);
    console.log(`  üéµ ${test.level} + ${test.healthy ? 'sain' : 'malade'} ‚Üí ${audioFile}`);
  });

  // 9. Test du service de sant√© (si possible)
  console.log('\nüè• 9. Test du service de sant√©...');
  try {
    const healthStatus = await healthAnalysisService.checkServiceStatus();
    console.log(`  üìä Statut: ${healthStatus.status}`);
    if (healthStatus.error) {
      console.log(`  ‚ö†Ô∏è Erreur: ${healthStatus.error}`);
    }
  } catch (error: any) {
    console.log(`  ‚ùå Erreur de test: ${error.message}`);
  }

  // 10. Test avec image simul√©e (si disponible)
  console.log('\nüì∑ 10. Test avec image simul√©e...');
  
  // Chercher une image de test
  const testImagePath = path.join(__dirname, '../test-images/sample-crop.jpg');
  if (fs.existsSync(testImagePath)) {
    try {
      const imageBuffer = fs.readFileSync(testImagePath);
      console.log(`  üì∏ Image de test trouv√©e: ${imageBuffer.length} bytes`);
      
      // Test de l'analyse compl√®te
      const result = await healthAnalysisService.analyzeCropHealth(imageBuffer, 'test-user');
      console.log(`  üìä R√©sultat: ${result.isHealthy ? 'Sain' : 'Malade'} (${(result.confidence * 100).toFixed(1)}%)`);
      console.log(`  üéöÔ∏è Niveau de confiance: ${result.confidenceLevel}`);
      console.log(`  üñºÔ∏è Qualit√© d'analyse: ${result.analysisQuality}`);
      
      if (result.detailedAnalysis) {
        console.log(`  üéØ Risque: ${result.detailedAnalysis.risk_assessment.level}`);
        console.log(`  ‚ö° Urgence: ${result.detailedAnalysis.risk_assessment.urgency}`);
      }
      
    } catch (error: any) {
      console.log(`  ‚ùå Erreur lors de l'analyse: ${error.message}`);
    }
  } else {
    console.log(`  ‚ö†Ô∏è Aucune image de test trouv√©e √† ${testImagePath}`);
    console.log('  üí° Cr√©ez un dossier test-images avec une image sample-crop.jpg pour tester l\'analyse compl√®te');
  }

  // 11. R√©sum√© final
  console.log('\nüìä 11. R√©sum√© des am√©liorations...');
  console.log('  ‚úÖ Syst√®me de niveaux de confiance: OK');
  console.log('  ‚úÖ Analyse de qualit√©: OK');
  console.log('  ‚úÖ Recommandations adaptatives: OK');
  console.log('  ‚úÖ √âvaluation des risques: OK');
  console.log('  ‚úÖ Coh√©rence des pr√©dictions: OK');
  console.log('  ‚úÖ S√©lection audio intelligente: OK');
  console.log(`  ${audioStatus.available ? '‚úÖ' : '‚ùå'} Fichiers audio: ${audioStatus.available ? 'Complets' : 'Incomplets'}`);

  console.log('\nüéâ Tests termin√©s !');
  
  if (!audioStatus.available || audioStatus.optional_missing.length > 0) {
    console.log('\n‚ö†Ô∏è  ATTENTION: Certains fichiers audio sont manquants.');
    console.log('   Consultez packages/bot/audio/README_NOUVEAUX_FICHIERS.md pour les cr√©er.');
    console.log('   Le syst√®me fonctionnera avec des fallbacks mais l\'exp√©rience sera limit√©e.');
  } else {
    console.log('\n‚úÖ Syst√®me d\'analyse de sant√© am√©lior√© enti√®rement op√©rationnel !');
  }
}

// Ex√©cuter les tests
if (require.main === module) {
  testEnhancedHealthAnalysis().catch(console.error);
}

export { testEnhancedHealthAnalysis };
