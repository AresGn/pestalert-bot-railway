import { LoggingService } from './loggingService';

/**
 * Service de gestion d'erreurs centralis√©
 */

export interface ErrorContext {
  userId?: string;
  action: string;
  service?: string;
  additionalData?: any;
}

export class ErrorHandlingService {
  private logger: LoggingService;

  constructor() {
    this.logger = new LoggingService();
  }

  /**
   * G√©rer les erreurs d'analyse d'image
   */
  handleImageAnalysisError(error: Error, context: ErrorContext): string {
    this.logger.logServiceError(context.service || 'IMAGE_ANALYSIS', error.message, context.userId);

    // D√©terminer le type d'erreur et retourner un message appropri√©
    if (error.message.includes('timeout') || error.message.includes('ECONNREFUSED')) {
      return '‚è∞ *Service temporairement indisponible*\n\nLe service d\'analyse est actuellement surcharg√©. Veuillez r√©essayer dans quelques minutes.';
    }
    
    if (error.message.includes('Image invalide') || error.message.includes('validation')) {
      this.logger.logImageValidationError(context.userId || 'unknown', error.message);
      return 'üì∑ *Image non valide*\n\nVeuillez envoyer une image claire et bien √©clair√©e de vos cultures. Formats accept√©s : JPEG, PNG, WebP.';
    }
    
    if (error.message.includes('API') || error.message.includes('prediction failed')) {
      return 'üîß *Erreur du service d\'analyse*\n\nNos services d\'IA sont temporairement indisponibles. Nous travaillons √† r√©soudre le probl√®me.';
    }
    
    if (error.message.includes('preprocessing')) {
      return 'üñºÔ∏è *Erreur de traitement d\'image*\n\nImpossible de traiter cette image. Assurez-vous qu\'elle n\'est pas corrompue et r√©essayez.';
    }

    // Erreur g√©n√©rique
    return '‚ùå *Erreur inattendue*\n\nUne erreur s\'est produite lors de l\'analyse. Veuillez r√©essayer ou contacter le support si le probl√®me persiste.';
  }

  /**
   * G√©rer les erreurs de service
   */
  handleServiceError(error: Error, serviceName: string, context: ErrorContext): string {
    this.logger.logServiceError(serviceName, error.message, context.userId);

    switch (serviceName) {
      case 'CROP_HEALTH':
        return 'üåæ *Service d\'analyse des cultures indisponible*\n\nLe service d\'analyse OpenEPI est temporairement hors ligne. Veuillez r√©essayer plus tard.';
      
      case 'IMAGE_PROCESSING':
        return 'üñºÔ∏è *Service de traitement d\'images indisponible*\n\nImpossible de traiter votre image actuellement. Veuillez r√©essayer.';
      
      case 'WEATHER':
        return 'üå§Ô∏è *Service m√©t√©orologique indisponible*\n\nLes donn√©es m√©t√©orologiques ne sont pas disponibles actuellement.';
      
      default:
        return `‚ö†Ô∏è *Service ${serviceName} indisponible*\n\nCe service est temporairement hors ligne. Veuillez r√©essayer plus tard.`;
    }
  }

  /**
   * G√©rer les erreurs de WhatsApp
   */
  handleWhatsAppError(error: Error, context: ErrorContext): void {
    this.logger.logServiceError('WHATSAPP', error.message, context.userId);
    
    console.error('‚ùå Erreur WhatsApp:', {
      message: error.message,
      context,
      timestamp: new Date().toISOString()
    });
  }

  /**
   * G√©rer les erreurs de validation
   */
  handleValidationError(error: Error, context: ErrorContext): string {
    this.logger.logImageValidationError(context.userId || 'unknown', error.message);

    if (error.message.includes('trop petite')) {
      return 'üìè *Image trop petite*\n\nVeuillez envoyer une image d\'au moins 100x100 pixels pour une analyse pr√©cise.';
    }
    
    if (error.message.includes('trop grande')) {
      return 'üìè *Image trop grande*\n\nVeuillez r√©duire la taille de votre image (maximum 4000x4000 pixels).';
    }
    
    if (error.message.includes('format')) {
      return 'üì∑ *Format non support√©*\n\nVeuillez envoyer une image au format JPEG, PNG ou WebP.';
    }

    return '‚ùå *Image non valide*\n\nVeuillez v√©rifier que votre image est correcte et r√©essayez.';
  }

  /**
   * G√©rer les erreurs critiques
   */
  handleCriticalError(error: Error, context: ErrorContext): void {
    this.logger.logServiceError('CRITICAL', error.message, context.userId);
    
    console.error('üö® ERREUR CRITIQUE:', {
      message: error.message,
      stack: error.stack,
      context,
      timestamp: new Date().toISOString()
    });

    // Ici, on pourrait ajouter des notifications d'alerte pour les administrateurs
    this.notifyAdministrators(error, context);
  }

  /**
   * Notifier les administrateurs en cas d'erreur critique
   */
  private notifyAdministrators(error: Error, context: ErrorContext): void {
    // Impl√©mentation future : notification par email, webhook, etc.
    console.log('üîî Notification administrateur requise:', {
      error: error.message,
      context,
      timestamp: new Date().toISOString()
    });
  }

  /**
   * Cr√©er un rapport d'erreur d√©taill√©
   */
  createErrorReport(error: Error, context: ErrorContext): any {
    return {
      timestamp: new Date().toISOString(),
      error: {
        message: error.message,
        stack: error.stack,
        name: error.name
      },
      context,
      environment: {
        nodeVersion: process.version,
        platform: process.platform,
        memory: process.memoryUsage()
      }
    };
  }

  /**
   * V√©rifier si une erreur est r√©cup√©rable
   */
  isRecoverableError(error: Error): boolean {
    const recoverableErrors = [
      'timeout',
      'ECONNREFUSED',
      'ENOTFOUND',
      'temporarily unavailable',
      'rate limit'
    ];

    return recoverableErrors.some(pattern => 
      error.message.toLowerCase().includes(pattern)
    );
  }

  /**
   * Obtenir des suggestions de r√©solution d'erreur
   */
  getErrorResolutionSuggestions(error: Error): string[] {
    const suggestions: string[] = [];

    if (error.message.includes('timeout')) {
      suggestions.push('V√©rifiez votre connexion internet');
      suggestions.push('R√©essayez dans quelques minutes');
    }

    if (error.message.includes('Image')) {
      suggestions.push('V√©rifiez la qualit√© de votre image');
      suggestions.push('Assurez-vous que l\'image est bien √©clair√©e');
      suggestions.push('Utilisez un format d\'image standard (JPEG, PNG)');
    }

    if (error.message.includes('API') || error.message.includes('service')) {
      suggestions.push('Le service peut √™tre temporairement indisponible');
      suggestions.push('Contactez le support si le probl√®me persiste');
    }

    return suggestions;
  }
}
