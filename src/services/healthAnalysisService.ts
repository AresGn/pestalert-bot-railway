import { CropHealthService } from './cropHealthService';
import { AudioService } from './audioService';
import { ImageProcessingService } from './imageProcessingService';
import { LoggingService } from './loggingService';
import { ConfidenceAnalysisService } from './confidenceAnalysisService';
import { PlantNetValidationService } from './plantNetValidationService';
import { UserGuidanceService } from './userGuidanceService';
import { MessageMedia } from 'whatsapp-web.js';
import { DetailedHealthAnalysis, ConfidenceLevel, AnalysisQuality } from '../types';

export interface HealthAnalysisResult {
  isHealthy: boolean;
  confidence: number;
  audioMessage: MessageMedia | null;
  textMessage: string;
  recommendation?: string;
  detailedAnalysis?: DetailedHealthAnalysis;
  confidenceLevel?: ConfidenceLevel;
  analysisQuality?: AnalysisQuality;
}

/**
 * Service sp√©cialis√© pour l'analyse de sant√© des cultures (Option 1)
 */
export class HealthAnalysisService {
  private cropHealthService: CropHealthService;
  private audioService: AudioService;
  private imageProcessingService: ImageProcessingService;
  private logger: LoggingService;
  private confidenceAnalysisService: ConfidenceAnalysisService;
  private plantNetValidationService: PlantNetValidationService;
  private userGuidanceService: UserGuidanceService;

  constructor() {
    this.cropHealthService = new CropHealthService();
    this.audioService = new AudioService();
    this.imageProcessingService = new ImageProcessingService();
    this.logger = new LoggingService();
    this.confidenceAnalysisService = new ConfidenceAnalysisService();
    this.plantNetValidationService = new PlantNetValidationService();
    this.userGuidanceService = new UserGuidanceService();
  }

  /**
   * Analyser la sant√© d'une culture √† partir d'une image avec analyse de confiance d√©taill√©e
   */
  async analyzeCropHealth(imageBuffer: Buffer, userId: string): Promise<HealthAnalysisResult> {
    try {
      console.log(`üåæ D√©but de l'analyse de sant√© avanc√©e pour ${userId}`);

      // 1. NOUVEAU: Validation PlantNet pr√©-analyse
      const plantNetValidation = await this.plantNetValidationService.validateAgriculturalImage(imageBuffer);

      if (!plantNetValidation.isValid) {
        console.log(`üö´ Image rejet√©e par PlantNet: ${plantNetValidation.reasons.join(', ')}`);

        // G√©n√©rer un message d'erreur appropri√© selon le type d'erreur
        const errorMessage = this.generatePlantNetErrorMessage(plantNetValidation);

        return {
          isHealthy: false,
          confidence: 0,
          audioMessage: null,
          textMessage: errorMessage,
          recommendation: plantNetValidation.suggestion || "Envoyer une image de culture agricole"
        };
      }

      console.log(`‚úÖ Image agricole valid√©e par PlantNet (confiance: ${(plantNetValidation.confidence * 100).toFixed(1)}%)`);
      if (plantNetValidation.species) {
        console.log(`üî¨ Esp√®ce identifi√©e: ${plantNetValidation.species.scientific} (${plantNetValidation.species.common})`);
      }

      // 2. Pr√©traitement de l'image (apr√®s validation PlantNet)
      const imageOptimization = await this.imageProcessingService.optimizeForAnalysis(imageBuffer);

      if (!imageOptimization.success) {
        return {
          isHealthy: false,
          confidence: 0,
          audioMessage: null,
          textMessage: `‚ùå Probl√®me avec l'image: ${imageOptimization.error}\n\nüì∑ Veuillez envoyer une nouvelle photo plus claire.`,
          recommendation: "Am√©liorer la qualit√© de l'image"
        };
      }

      // 3. Analyses parall√®les avec OpenEPI (apr√®s validation agricole)
      const [binaryResult, multiClassResult] = await Promise.all([
        this.cropHealthService.analyzeBinaryHealth(imageOptimization.processedImage!),
        this.cropHealthService.analyzeMultiClass(imageOptimization.processedImage!, { model: 'single-HLT' })
      ]);

      console.log(`üìä R√©sultat binaire: ${binaryResult.prediction} (${(binaryResult.confidence * 100).toFixed(1)}%)`);
      console.log(`üìä Top maladie: ${multiClassResult.top_prediction.disease} (${(multiClassResult.top_prediction.confidence * 100).toFixed(1)}%)`);

      // 4. Analyse de confiance d√©taill√©e
      const isHealthy = binaryResult.prediction === 'healthy';
      const confidenceLevel = this.confidenceAnalysisService.getConfidenceLevel(binaryResult.confidence);
      const analysisQuality = this.confidenceAnalysisService.determineAnalysisQuality(
        binaryResult.confidence,
        multiClassResult.top_prediction.confidence,
        binaryResult.image_quality,
        binaryResult.processing_time
      );

      // 4. Calculs de m√©triques avanc√©es
      const confidenceSpread = this.confidenceAnalysisService.calculateConfidenceSpread(multiClassResult.all_predictions);
      const predictionConsistency = this.confidenceAnalysisService.calculatePredictionConsistency(
        binaryResult.confidence,
        multiClassResult.top_prediction.confidence,
        binaryResult.prediction
      );

      // 5. G√©n√©rer les recommandations
      const recommendations = this.confidenceAnalysisService.generateRecommendations(
        confidenceLevel,
        isHealthy,
        multiClassResult.top_prediction.disease
      );

      // 6. √âvaluation du risque
      const riskAssessment = this.confidenceAnalysisService.assessRiskLevel(
        isHealthy,
        confidenceLevel,
        multiClassResult.top_prediction.confidence,
        multiClassResult.top_prediction.disease
      );

      // 7. Cr√©er l'analyse d√©taill√©e
      const detailedAnalysis: DetailedHealthAnalysis = {
        binary: binaryResult,
        multiClass: multiClassResult,
        confidence_level: confidenceLevel,
        analysis_quality: analysisQuality,
        confidence_interval: this.confidenceAnalysisService.getConfidenceInterval(binaryResult.confidence),
        detailed_metrics: {
          binary_confidence: binaryResult.confidence,
          top_disease_confidence: multiClassResult.top_prediction.confidence,
          confidence_spread: confidenceSpread,
          prediction_consistency: predictionConsistency
        },
        recommendations,
        risk_assessment: riskAssessment
      };

      // 8. Obtenir l'audio appropri√© selon le niveau de confiance
      const audioFile = this.confidenceAnalysisService.getAudioFile(confidenceLevel, isHealthy);
      let audioMessage: MessageMedia | null = null;

      try {
        audioMessage = await this.audioService.createAudioMessage(audioFile);
      } catch (audioError) {
        console.log(`‚ö†Ô∏è Fichier audio ${audioFile} non trouv√©, utilisation du fallback`);
        // Fallback vers les fichiers existants
        if (isHealthy) {
          audioMessage = await this.audioService.getHealthyCropAudio();
        } else {
          audioMessage = await this.audioService.getDiseasedCropAudio();
        }
      }

      // 9. G√©n√©rer le message texte d√©taill√©
      const textMessage = this.generateDetailedHealthMessage(detailedAnalysis);

      // 10. Logger l'analyse compl√®te
      this.logger.logBotActivity(userId, 'Advanced Health Analysis', {
        prediction: binaryResult.prediction,
        confidence: binaryResult.confidence,
        confidence_level: confidenceLevel,
        analysis_quality: analysisQuality,
        top_disease: multiClassResult.top_prediction.disease,
        risk_level: riskAssessment.level,
        timestamp: new Date().toISOString()
      });

      return {
        isHealthy,
        confidence: binaryResult.confidence,
        audioMessage,
        textMessage,
        recommendation: this.generateAdvancedRecommendation(detailedAnalysis),
        detailedAnalysis,
        confidenceLevel,
        analysisQuality
      };

    } catch (error: any) {
      console.error('‚ùå Erreur lors de l\'analyse de sant√© avanc√©e:', error.message);

      this.logger.logServiceError('ADVANCED_HEALTH_ANALYSIS', error.message, userId);

      return {
        isHealthy: false,
        confidence: 0,
        audioMessage: null,
        textMessage: "‚ùå Une erreur s'est produite lors de l'analyse avanc√©e. Veuillez r√©essayer avec une nouvelle photo.",
        recommendation: "R√©essayer l'analyse"
      };
    }
  }

  /**
   * G√©n√©rer un message texte d√©taill√© avec toutes les m√©triques
   */
  private generateDetailedHealthMessage(analysis: DetailedHealthAnalysis): string {
    const isHealthy = analysis.binary.prediction === 'healthy';
    const binaryConfidence = (analysis.binary.confidence * 100).toFixed(1);
    const topDiseaseConfidence = (analysis.multiClass.top_prediction.confidence * 100).toFixed(1);
    const consistencyScore = (analysis.detailed_metrics.prediction_consistency * 100).toFixed(1);

    const statusEmoji = isHealthy ? '‚úÖ' : '‚ö†Ô∏è';
    const statusText = isHealthy ? 'CULTURE SAINE' : 'ATTENTION REQUISE';

    const confidenceLevelText = {
      'very_low': 'üî¥ Tr√®s Faible',
      'low': 'üü† Faible',
      'medium': 'üü° Moyenne',
      'high': 'üü¢ √âlev√©e',
      'very_high': 'üíö Tr√®s √âlev√©e'
    }[analysis.confidence_level];

    const qualityText = {
      'poor': 'üî¥ Faible',
      'fair': 'üü° Correcte',
      'good': 'üü¢ Bonne',
      'excellent': 'üíö Excellente'
    }[analysis.analysis_quality];

    const riskEmoji = {
      'minimal': 'üü¢',
      'low': 'üü°',
      'moderate': 'üü†',
      'high': 'üî¥',
      'critical': 'üÜò'
    }[analysis.risk_assessment.level];

    let message = `${statusEmoji} **${statusText}**

üìä **ANALYSE D√âTAILL√âE**
‚Ä¢ üéØ Diagnostic: ${isHealthy ? 'Saine' : analysis.multiClass.top_prediction.disease}
‚Ä¢ üìà Confiance binaire: ${binaryConfidence}%
‚Ä¢ üî¨ Confiance diagnostic: ${topDiseaseConfidence}%
‚Ä¢ üéöÔ∏è Niveau de confiance: ${confidenceLevelText}
‚Ä¢ üñºÔ∏è Qualit√© d'analyse: ${qualityText}
‚Ä¢ üîÑ Coh√©rence: ${consistencyScore}%

üìã **M√âTRIQUES TECHNIQUES**
‚Ä¢ ‚ö° Temps de traitement: ${analysis.binary.processing_time?.toFixed(2) || 'N/A'}s
‚Ä¢ üñºÔ∏è Qualit√© image: ${analysis.binary.image_quality || 'Inconnue'}
‚Ä¢ üß† Mod√®le utilis√©: ${analysis.multiClass.model_used || 'Standard'}
‚Ä¢ üìä Classes analys√©es: ${analysis.multiClass.total_classes || 'N/A'}

${riskEmoji} **√âVALUATION DU RISQUE: ${analysis.risk_assessment.level.toUpperCase()}**
${analysis.risk_assessment.factors.map(factor => `‚Ä¢ ${factor}`).join('\n')}

üéØ **RECOMMANDATIONS IMM√âDIATES**
${analysis.recommendations.immediate.map(rec => `‚Ä¢ ${rec}`).join('\n')}`;

    if (analysis.recommendations.short_term.length > 0) {
      message += `\n\nüìÖ **ACTIONS √Ä COURT TERME**
${analysis.recommendations.short_term.map(rec => `‚Ä¢ ${rec}`).join('\n')}`;
    }

    if (analysis.recommendations.monitoring.length > 0) {
      message += `\n\nüëÅÔ∏è **SURVEILLANCE RECOMMAND√âE**
${analysis.recommendations.monitoring.map(rec => `‚Ä¢ ${rec}`).join('\n')}`;
    }

    message += `\n\n‚è∞ **Analys√©**: ${new Date().toLocaleString()}
üí° Tapez 'menu' pour revenir au menu principal`;

    return message;
  }

  /**
   * G√©n√©rer le message texte simple (fallback)
   */
  private generateHealthMessage(isHealthy: boolean, confidence: number): string {
    const confidencePercent = (confidence * 100).toFixed(1);

    if (isHealthy) {
      return `‚úÖ **CULTURE SAINE**

üåæ **R√©sultat**: Votre culture semble √™tre en bonne sant√©
üìä **Confiance**: ${confidencePercent}%
‚è∞ **Analys√©**: ${new Date().toLocaleString()}

üéØ **Recommandations**:
‚Ä¢ Continuez vos pratiques actuelles
‚Ä¢ Surveillez r√©guli√®rement l'√©volution
‚Ä¢ Maintenez les conditions optimales

üí° Tapez 'menu' pour revenir au menu principal`;
    } else {
      return `‚ö†Ô∏è **ATTENTION REQUISE**

üåæ **R√©sultat**: Votre culture n√©cessite une attention
üìä **Confiance**: ${confidencePercent}%
‚è∞ **Analys√©**: ${new Date().toLocaleString()}

üö® **Actions recommand√©es**:
‚Ä¢ Examinez la culture de plus pr√®s
‚Ä¢ Consultez un expert agricole si n√©cessaire
‚Ä¢ Surveillez l'√©volution quotidiennement
‚Ä¢ Envisagez un traitement pr√©ventif

üí° Tapez 'menu' pour revenir au menu principal`;
    }
  }

  /**
   * G√©n√©rer des recommandations avanc√©es bas√©es sur l'analyse d√©taill√©e
   */
  private generateAdvancedRecommendation(analysis: DetailedHealthAnalysis): string {
    const urgencyText = {
      'none': 'Aucune action urgente',
      'low': 'Surveillance recommand√©e',
      'medium': 'Action dans les 24-48h',
      'high': 'Action dans les 12h',
      'immediate': 'Action imm√©diate requise'
    }[analysis.risk_assessment.urgency];

    return `${urgencyText} - Confiance ${analysis.confidence_level} (${(analysis.binary.confidence * 100).toFixed(1)}%)`;
  }

  /**
   * G√©n√©rer des recommandations selon le r√©sultat (m√©thode simple pour compatibilit√©)
   */
  private generateRecommendation(isHealthy: boolean, confidence: number): string {
    if (isHealthy) {
      if (confidence > 0.8) {
        return "Culture en excellente sant√© - continuez vos pratiques";
      } else {
        return "Culture saine mais surveillez l'√©volution";
      }
    } else {
      if (confidence > 0.8) {
        return "Probl√®me d√©tect√© avec forte confiance - action imm√©diate recommand√©e";
      } else {
        return "Probl√®me potentiel d√©tect√© - surveillance renforc√©e recommand√©e";
      }
    }
  }

  /**
   * G√©n√©rer un message d'erreur appropri√© pour PlantNet
   */
  private generatePlantNetErrorMessage(validation: any): string {
    const baseMessage = 'üö´ **Image non appropri√©e pour l\'analyse de sant√©**\n\n';

    switch (validation.errorType) {
      case 'NOT_AGRICULTURAL':
        let message = baseMessage + 'üåæ Cette image ne contient pas de culture agricole reconnue.\n\n';

        if (validation.species) {
          message += `üî¨ **PlantNet a identifi√©:** ${validation.species.scientific}\n`;
          message += `üìõ **Nom commun:** ${validation.species.common}\n\n`;
          message += 'üí° Cette esp√®ce n\'est pas dans notre base de cultures agricoles.\n\n';
        }

        message += 'üå± **Cultures support√©es par notre syst√®me:**\n';
        message += '‚Ä¢ üåΩ Ma√Øs (Zea mays)\n';
        message += '‚Ä¢ üç† Manioc (Manihot esculenta)\n';
        message += '‚Ä¢ ü´ò Haricots (Phaseolus vulgaris)\n';
        message += '‚Ä¢ üç´ Cacao (Theobroma cacao)\n';
        message += '‚Ä¢ üçå Banane (Musa spp.)\n\n';

        return message + 'üîÑ Tapez "menu" pour revenir au menu principal.';

      case 'API_LIMIT':
        return baseMessage +
               '‚ö†Ô∏è Limite d\'utilisation de l\'API atteinte.\n\n' +
               'üí° **Solutions:**\n' +
               '‚Ä¢ üïê R√©essayez dans quelques heures\n' +
               '‚Ä¢ üì∑ L\'analyse basique est utilis√©e en attendant\n\n' +
               'üîÑ Tapez "menu" pour revenir au menu principal.';

      case 'POOR_QUALITY':
        return baseMessage +
               'üì∑ La qualit√© de l\'image n\'est pas suffisante.\n\n' +
               'üí° **Conseils pour une meilleure photo:**\n' +
               '‚Ä¢ üéØ Prenez la photo plus pr√®s de la plante\n' +
               '‚Ä¢ ‚òÄÔ∏è Assurez-vous d\'avoir assez de lumi√®re\n' +
               '‚Ä¢ üì± √âvitez les photos floues\n' +
               '‚Ä¢ üåø Montrez clairement les feuilles\n\n' +
               'üîÑ Tapez "menu" pour revenir au menu principal.';

      default:
        return baseMessage +
               '‚ùì Probl√®me lors de l\'identification.\n\n' +
               'üí° **Recommandations:**\n' +
               '‚Ä¢ üì∑ Envoyez une photo claire de vos cultures\n' +
               '‚Ä¢ üå± Assurez-vous que la v√©g√©tation est visible\n\n' +
               'üîÑ Tapez "menu" pour revenir au menu principal.';
    }
  }

  /**
   * V√©rifier le statut du service
   */
  async checkServiceStatus(): Promise<{ status: string; error?: string }> {
    try {
      const cropHealthStatus = await this.cropHealthService.checkStatus();
      const audioStatus = this.audioService.checkAudioFiles();

      if (cropHealthStatus.status !== 'healthy') {
        return {
          status: 'error',
          error: 'Service OpenEPI non disponible'
        };
      }

      if (!audioStatus.available) {
        return {
          status: 'warning',
          error: `Fichiers audio manquants: ${audioStatus.missing.join(', ')}`
        };
      }

      return { status: 'healthy' };
    } catch (error: any) {
      return {
        status: 'error',
        error: error.message
      };
    }
  }
}
