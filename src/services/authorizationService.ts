import { AllowedNumbersConfig, loadAllowedNumbersFromEnv, isNumberAllowed } from '../config/allowedNumbers';
import { LoggingService } from './loggingService';

export class AuthorizationService {
  private config: AllowedNumbersConfig;
  private logger: LoggingService;
  private unauthorizedAttempts: Map<string, number> = new Map();

  constructor() {
    this.config = loadAllowedNumbersFromEnv();
    this.logger = new LoggingService();
    this.logConfiguration();
  }

  /**
   * V√©rifier si un num√©ro est autoris√© √† utiliser le bot
   */
  public checkAuthorization(phoneNumber: string): {
    allowed: boolean;
    reason: string;
    isAdmin: boolean;
    shouldAlert: boolean;
  } {
    // Ignorer les messages syst√®me WhatsApp
    if (phoneNumber.includes('@broadcast') || phoneNumber.includes('status@')) {
      return {
        allowed: false,
        reason: 'Message syst√®me WhatsApp',
        isAdmin: false,
        shouldAlert: false // Pas d'alerte pour les messages syst√®me
      };
    }

    const result = isNumberAllowed(phoneNumber, this.config);

    // Si non autoris√©, enregistrer la tentative
    if (!result.allowed) {
      this.recordUnauthorizedAttempt(phoneNumber);
    }

    return {
      ...result,
      shouldAlert: !result.allowed && this.config.alertOnUnauthorized
    };
  }

  /**
   * V√©rifier si un num√©ro est administrateur
   */
  public isAdmin(phoneNumber: string): boolean {
    const cleanNumber = phoneNumber.replace('@c.us', '').replace('+', '');
    return this.config.adminNumbers.includes(cleanNumber);
  }

  /**
   * Obtenir la liste des num√©ros d'administrateurs (pour les alertes)
   */
  public getAdminNumbers(): string[] {
    return this.config.adminNumbers.map(num => `${num}@c.us`);
  }

  /**
   * Obtenir les statistiques d'autorisation
   */
  public getAuthStats(): {
    filterMode: string;
    adminCount: number;
    allowedUsersCount: number;
    allowedCountriesCount: number;
    unauthorizedAttempts: number;
  } {
    return {
      filterMode: this.config.filterMode,
      adminCount: this.config.adminNumbers.length,
      allowedUsersCount: this.config.allowedUsers.length,
      allowedCountriesCount: this.config.allowedCountryCodes.length,
      unauthorizedAttempts: Array.from(this.unauthorizedAttempts.values()).reduce((a, b) => a + b, 0)
    };
  }

  /**
   * Recharger la configuration
   */
  public reloadConfig(): void {
    this.config = loadAllowedNumbersFromEnv();
    this.logConfiguration();
    console.log('üîÑ Configuration d\'autorisation recharg√©e');
  }

  /**
   * Ajouter un num√©ro √† la liste des utilisateurs autoris√©s (admin seulement)
   */
  public addAllowedUser(phoneNumber: string, adminNumber: string): boolean {
    if (!this.isAdmin(adminNumber)) {
      return false;
    }

    const cleanNumber = phoneNumber.replace('@c.us', '').replace('+', '');
    if (!this.config.allowedUsers.includes(cleanNumber)) {
      this.config.allowedUsers.push(cleanNumber);
      this.logger.logBotActivity('ADMIN', `Num√©ro ajout√© √† la liste autoris√©e: ${cleanNumber}`, {
        addedBy: adminNumber
      });
      return true;
    }
    return false;
  }

  /**
   * Supprimer un num√©ro de la liste des utilisateurs autoris√©s (admin seulement)
   */
  public removeAllowedUser(phoneNumber: string, adminNumber: string): boolean {
    if (!this.isAdmin(adminNumber)) {
      return false;
    }

    const cleanNumber = phoneNumber.replace('@c.us', '').replace('+', '');
    const index = this.config.allowedUsers.indexOf(cleanNumber);
    if (index > -1) {
      this.config.allowedUsers.splice(index, 1);
      this.logger.logBotActivity('ADMIN', `Num√©ro supprim√© de la liste autoris√©e: ${cleanNumber}`, {
        removedBy: adminNumber
      });
      return true;
    }
    return false;
  }

  /**
   * Changer le mode de filtrage (admin seulement)
   */
  public setFilterMode(mode: 'whitelist' | 'country' | 'disabled', adminNumber: string): boolean {
    if (!this.isAdmin(adminNumber)) {
      return false;
    }

    const oldMode = this.config.filterMode;
    this.config.filterMode = mode;
    
    this.logger.logBotActivity('ADMIN', `Mode de filtrage chang√©: ${oldMode} ‚Üí ${mode}`, {
      changedBy: adminNumber
    });
    
    console.log(`üîß Mode de filtrage chang√©: ${oldMode} ‚Üí ${mode}`);
    return true;
  }

  /**
   * Enregistrer une tentative d'acc√®s non autoris√©e
   */
  private recordUnauthorizedAttempt(phoneNumber: string): void {
    const cleanNumber = phoneNumber.replace('@c.us', '').replace('+', '');
    const currentAttempts = this.unauthorizedAttempts.get(cleanNumber) || 0;
    this.unauthorizedAttempts.set(cleanNumber, currentAttempts + 1);
    
    this.logger.logBotActivity('SECURITY', 'Tentative d\'acc√®s non autoris√©e', {
      phoneNumber: cleanNumber,
      attempts: currentAttempts + 1,
      timestamp: new Date().toISOString()
    });
  }

  /**
   * Logger la configuration actuelle
   */
  private logConfiguration(): void {
    console.log('üîê Configuration d\'autorisation:');
    console.log(`   Mode de filtrage: ${this.config.filterMode}`);
    console.log(`   Administrateurs: ${this.config.adminNumbers.length}`);
    console.log(`   Utilisateurs autoris√©s: ${this.config.allowedUsers.length}`);
    console.log(`   Pays autoris√©s: ${this.config.allowedCountryCodes.length}`);
    console.log(`   Alertes non autoris√©es: ${this.config.alertOnUnauthorized ? 'Activ√©es' : 'D√©sactiv√©es'}`);
    
    if (this.config.filterMode === 'disabled') {
      console.log('‚ö†Ô∏è  ATTENTION: Le filtrage est D√âSACTIV√â - Le bot r√©pond √† tous les num√©ros');
    }
  }

  /**
   * Obtenir un message d'aide pour les commandes d'autorisation (admin seulement)
   */
  public getAdminHelp(): string {
    return `üîê *Commandes d'Administration - Autorisation*

üìã **Gestion des utilisateurs:**
‚Ä¢ !auth add +22912345678 - Ajouter un num√©ro autoris√©
‚Ä¢ !auth remove +22912345678 - Supprimer un num√©ro autoris√©
‚Ä¢ !auth list - Voir les num√©ros autoris√©s

üîß **Configuration:**
‚Ä¢ !auth mode whitelist - Mode liste blanche
‚Ä¢ !auth mode country - Mode pays autoris√©s
‚Ä¢ !auth mode disabled - D√©sactiver le filtrage

üìä **Statistiques:**
‚Ä¢ !auth stats - Voir les statistiques d'autorisation
‚Ä¢ !auth reload - Recharger la configuration

‚ö†Ô∏è **Note:** Ces commandes sont r√©serv√©es aux administrateurs.`;
  }
}
